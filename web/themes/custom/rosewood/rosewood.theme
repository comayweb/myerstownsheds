<?php
  
/**
 * Implements theme_preprocess_block().
 */
function rosewood_preprocess_block(&$variables) {
  // Remove page title block on 'product_item' content type.
  $block_id = $variables['elements']['#id'];
  if ($block_id == 'rosewood_page_title') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && $node->getType() == 'product_item') {
      $variables['content'] = [];
    }
  }
}

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
 
 /**
 * Implements hook_preprocess_html().
 */
function rosewood_preprocess_html(&$variables) {
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }
}

/**
 * Implements hook_theme_suggestions_alter
 */
/**
 * Implementation of hook_theme_suggestions_form_element_alter().
 */
function rosewood_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
    $form_element_type = $variables['element']['#type'];
    if (!empty($variables['element']['#array_parents'][1]) && ($variables['element']['#array_parents'][1] === 'product_options') && ($form_element_type === 'checkbox')) {
      $suggestions[] = $variables['theme_hook_original'] . '--type-webform-checkbox';
    }
    if (!empty($variables['element']['#array_parents'][1]) && ($variables['element']['#array_parents'][1] === 'product_options') && ($form_element_type === 'radio')) {
      $suggestions[] = $variables['theme_hook_original'] . '--type-webform-radio';
    }
}

/**
 * Implementation of hook_preprocess_form_element().
 */
function rosewood_preprocess_form_element(&$variables, $hook, &$info) {
  $form_element_type = $variables['element']['#type'];
  if (!empty($variables['element']['#array_parents'][1]) && ($variables['element']['#array_parents'][1] === 'product_options') && ($form_element_type === 'checkbox')) {
    $info['template'] = 'form-element--type-webform-checkbox';
  }
  if (!empty($variables['element']['#array_parents'][1]) && ($variables['element']['#array_parents'][1] === 'product_options') && ($form_element_type === 'radio')) {
    $info['template'] = 'form-element--type-webform-radio';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function rosewood_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function rosewood_page_attachments_alter(array &$attachments) {
  // Trim all meta tags to a max of 300 characters.
  if (!empty($attachments['#attached']['html_head'])) {
    // Adjust this as needed.
    $max_length = 225;
    foreach ($attachments['#attached']['html_head'] as &$tag) {
      // Only process meta tags with a 'content' attribute, that way it will
      // exclude LINK tags or meta tags which do not have a "content" value.
      if (isset($tag[0]['#tag']) && $tag[0]['#tag'] == 'meta') {
        if (isset($tag[0]['#attributes']['content'])) {
          if (!is_string($tag[0]['#attributes']['content'])) {
            $tag[0]['#attributes']['content'] = (string) $tag[0]['#attributes']['content'];
          }
          if (strlen($tag[0]['#attributes']['content']) > $max_length) {
            // Trim the string three characters shorter than the max so that
            // there is room for the elipses.
            $string = wordwrap($tag[0]['#attributes']['content'], ($max_length - 3));
            $string = explode("\n", $string);
            $tag[0]['#attributes']['content'] = $string[0] . '...';
          }
        }
      }
    }
  }
}